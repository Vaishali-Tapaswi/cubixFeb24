Lab4 - secret and pod to test the same
sec.yml
----------------
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
data:
  username: YWRtaW4K
  password: bXlwYXNzCg==
----------------
secpod.yml
----------------
apiVersion: v1
kind: Pod
metadata:
  name: secpod
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
        # name must match the volume name below
        - name: secret-volume
          mountPath: /etc/secret-volume
  # The secret data is exposed to Containers in the Pod through a Volume.
  volumes:
    - name: secret-volume
      secret:
        secretName: mysecret
----------------
        apply sec.yml and then secpod
        dashboard -check secret 
                   check logs on secpod
                   check folder - /etc/secret-volume
                   cat /etc/secret-volume/username


Lab3 - Create a folder services
        copy pv.yml
        copy pvc.yml
        create replicaset.yml
----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: httpserver
  template:
    metadata:
      labels:
        app: httpserver
    spec:
     volumes:
      - name: task-pv-storage
        persistentVolumeClaim:
           claimName: task-pv-claim
     containers:
      - name: httpserver
        image: vaishalitapaswi/simple
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
----------------
    apply this file 
    enable dashboard
        minikube dashboard
    web app 
        check nodes,pods, pvc 
        delete a pod
        run exec to connect to pod

    Modify replicaset to stateful set , create and observe
        1. names of pods
        2. Delete pod and observe impact

Lab2 - Create namespace
    kubectl create namespace myns
    kubectl create deployment deploy1 --image=vaishalitapaswi/cubixnode --namespace myns
    kubectl get deployments (will not be listed)
    kubectl get deployments --namespace myns
    kubectl get deployments -A

Lab1 - Simple Lab
              https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/
      		Write Steps 
      *********************
      mkdir /mnt/data
      sh -c "echo 'Hello from Kubernetes storage' > /mnt/data/index.html"
      	
      cat /mnt/data/index.html
      pv-volume.yml
---------------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: task-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
    
----------------------------------
      kubectl apply -f pv-volume.yml
      kubectl get pv task-pv-volume
      pv-claim.yml
----------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
----------------------------------
      kubectl apply -f pv-claim.yml
      kubectl get pv task-pv-volume
      kubectl get pvc task-pv-claim
      pv-pod.yml
----------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: pod2
spec:
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: task-pv-claim
  containers:
    - name: c1
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
      
----------------------------------
      kubectl apply -f pv-pod.yml
      kubectl get pod pod2
      kubectl exec -it task-pv-pod -- /bin/bash
      	apt update
      	apt install curl
      	curl http://localhost/
      	
      kubectl delete pod pod2
      kubectl delete pvc task-pv-claim
      kubectl delete pv task-pv-volume

  Option 1 
    create pv, pvc same
    create 3 pods -> (kubectl exec -it task-pv-pod -- /bin/bash) exec write some data 
   
